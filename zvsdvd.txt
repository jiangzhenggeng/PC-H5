#! /usr/bin/env python   
# -*- coding: utf-8 -*-
# PTS Script record tool v0.2.6.3
# PTS脚本SDK：框架API、常用HTTP请求/响应处理API
from util import PTS
from HTTPClient import NVPair
from HTTPClient import Cookie
from HTTPClient import HTTPRequest
from HTTPClient import CookieModule
# 脚本初始化段，可以设置压测引擎的常用HTTP属性
#PTS.HttpUtilities.setKeepAlive(False)
#PTS.HttpUtilities.setUrlEncoding('GBK')
#PTS.HttpUtilities.setFollowRedirects(False)
#PTS.HttpUtilities.setUseCookieModule(False)
PTS.HttpUtilities.setUseContentEncoding(True)
PTS.HttpUtilities.setUseTransferEncoding(True)

## 如想通过ECS内网IP进行压测，必须在下方“innerIp”备注行中输入ECS内网IP，如有多个请以英文逗号分隔，例如：127.0.0.1,127.0.0.2
# innerIp:

## 脚本执行单元类，每个VU/压测线程会创建一个TestRunner实例对象
class TestRunner:
    # TestRunner对象的初始化方法，每个线程在创建TestRunner后执行一次该方法
    def __init__(self):
        self.threadContext = PTS.Context.getThreadContext()
        self.init_cookies = CookieModule.listAllCookies(self.threadContext)
    # 主体压测方法，每个线程在测试生命周期内会循环调用该方法
    def __call__(self):
        PTS.Data.delayReports = 1
        for c in self.init_cookies:
            CookieModule.addCookie(c, self.threadContext)
        statusCode = self.action1()
        PTS.Framework.setExtraData(statusCode)                
        PTS.Data.report()
        PTS.Data.delayReports = 0
    # TestRunner销毁方法，每个线程循环执行完成后执行一次该方法
    def __del__(self):
        for c in self.init_cookies:
            CookieModule.addCookie(c, self.threadContext)
    # 定义请求函数

    ## action1
    def action1(self):
        statusCode = [0L, 0L, 0L, 0L]        

        headers = [ NVPair('Accept', '*/*'), NVPair('Upgrade-Insecure-Requests', '1'), NVPair('Referer', 'http://new.jiguo.com/index/index.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().GET('http://new.jiguo.com/index/index.html', None, headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        headers = [ NVPair('Accept', '*/*'), NVPair('X-Requested-With', 'XMLHttpRequest'), NVPair('Referer', 'http://new.jiguo.com/index/index.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().GET('http://new.jiguo.com/api/event/EventList?act=hot&limit=0&size=12', None, headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        headers = [ NVPair('Accept', '*/*'), NVPair('X-Requested-With', 'XMLHttpRequest'), NVPair('Referer', 'http://new.jiguo.com/index/index.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().GET('http://new.jiguo.com/api/article/GetArticleList?limit=1498812606&size=30', None, headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        headers = [ NVPair('Accept', '*/*'), NVPair('Origin', 'http://new.jiguo.com'), NVPair('Content-type', 'text/plain;charset=UTF-8'), NVPair('Referer', 'http://new.jiguo.com/index/index.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().POST('http://io.jiguo.com:2126/socket.io/?EIO=3&transport=polling&t=1498836271558-2&sid=1498836271.45043487032', '''''', headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        headers = [ NVPair('Accept', '*/*'), NVPair('Upgrade-Insecure-Requests', '1'), NVPair('Referer', 'http://new.jiguo.com/index/index.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().GET('http://new.jiguo.com/event/index/1481.html', None, headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        headers = [ NVPair('Accept', '*/*'), NVPair('X-Requested-With', 'XMLHttpRequest'), NVPair('Referer', 'http://new.jiguo.com/event/index/1481.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().GET('http://new.jiguo.com/api/event/HotEvent?id=1481&limit=0&size=4', None, headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        headers = [ NVPair('Accept', '*/*'), NVPair('X-Requested-With', 'XMLHttpRequest'), NVPair('Referer', 'http://new.jiguo.com/event/index/1481.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().GET('http://new.jiguo.com/api/event/Roster?id=1481', None, headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        headers = [ NVPair('Accept', '*/*'), NVPair('X-Requested-With', 'XMLHttpRequest'), NVPair('Referer', 'http://new.jiguo.com/event/index/1481.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().GET('http://new.jiguo.com/api/event/EventLinkBlog?id=1481&limit=0&size=3', None, headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        headers = [ NVPair('Accept', '*/*'), NVPair('Origin', 'http://new.jiguo.com'), NVPair('Content-type', 'text/plain;charset=UTF-8'), NVPair('Referer', 'http://new.jiguo.com/event/index/1481.html'), NVPair('Accept-Encoding', 'gzip, deflate'), NVPair('Accept-Language', 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'), NVPair('User-Agent', 'PTS-HTTP-CLIENT'), ]
        result = HTTPRequest().POST('http://io.jiguo.com:2126/socket.io/?EIO=3&transport=polling&t=1498836276276-2&sid=1498836276.283349527970', '''''', headers)
        PTS.Framework.addHttpCode(result.getStatusCode(), statusCode)

        ## statusCode[0]代表http code < 300 个数,    statusCode[1] 代表 300<=http code<400 个数
        # statusCode[2]代表400<=http code<500个数，  statusCode[3] 代表 http code >=500个数
        # 如果http code 300 到 400 之间是正常的
        # 那么判断事务失败，请将statusCode[1:3] 改为   statusCode[2:3] 即可
        if(sum(statusCode[1:3]) > 0):
            PTS.Data.forCurrentTest.success = False
            PTS.Logger.error(u'事务请求中http 返回状态大于300，请检查请求是否正确!')

        return statusCode

# 编织压测事务
PTS.Framework.instrumentMethod(u'action1', 'action1', TestRunner)